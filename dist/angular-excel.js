var excel;
(function (excel) {
    Angular.module("angular-excel", [])
        .constant("saveAs", saveAs)
        .constant("XLSX", XLSX);
})(excel || (excel = {}));
var CellAddress = (function () {
    function CellAddress(row, col) {
        this.r = row;
        this.c = col;
    }
    return CellAddress;
}());
var CellRange = (function () {
    function CellRange() {
        this.s = new CellAddress(0, 0);
        this.e = new CellAddress(0, 0);
    }
    CellRange.prototype.addAddress = function (address) {
        if (address.r < this.s.r)
            this.s.r = address.r;
        if (address.c < this.s.c)
            this.s.c = address.c;
        if (address.r > this.e.r)
            this.e.r = address.r;
        if (address.c > this.e.c)
            this.e.c = address.c;
    };
    return CellRange;
}());
var DateCell = (function () {
    function DateCell(value) {
        if (value == null)
            return;
        this.v = value;
        this.t = 'd';
    }
    return DateCell;
}());
var StringCell = (function () {
    function StringCell(value) {
        if (value == null)
            return;
        this.v = value;
        this.t = 's';
    }
    return StringCell;
}());
var WorkSheet = (function () {
    function WorkSheet(name, xlsx) {
        this.name = name;
        this.xlsx = xlsx;
        this._range = new CellRange();
    }
    WorkSheet.prototype.setCell = function (row, col, value, cell) {
        var address = new CellAddress(row, col);
        if (!cell)
            cell = new StringCell(value);
        var cellReference = this.xlsx.utils.encode_cell(address);
        this[cellReference] = cell;
        this._range.addAddress(address);
        this["!ref"] = this.xlsx.utils.encode_range(this._range);
    };
    WorkSheet.prototype.getCell = function (row, col) {
        var address = new CellAddress(row, col);
        var cellReference = this.xlsx.utils.encode_cell(address);
        var cell = this[cellReference];
        return cell;
    };
    return WorkSheet;
}());
var WorkBook = (function () {
    function WorkBook(xlsx) {
        this.xlsx = xlsx;
        this['SheetNames'] = [];
        this['Sheets'] = {};
    }
    WorkBook.prototype.addWorkSheet = function (worksheet) {
        if (typeof worksheet == "string")
            worksheet = new WorkSheet(worksheet, this.xlsx);
        var name = worksheet.name;
        var sheetNames = this['SheetNames'];
        sheetNames.push(name);
        this['Sheets'][name] = worksheet;
        return worksheet;
    };
    return WorkBook;
}());
var ExcelConverter = (function () {
    function ExcelConverter(_saveAs, xlsx) {
        this._saveAs = _saveAs;
        this.xlsx = xlsx;
    }
    ExcelConverter.prototype.create = function () {
        var wb = new WorkBook(this.xlsx);
        return wb;
    };
    ExcelConverter.prototype.createBuilder = function (values) {
        var builder = new WorkSheetBuilder(this.xlsx, values);
        return builder;
    };
    ExcelConverter.prototype.saveAs = function (name, workbook) {
        var wbout = this.xlsx.write(workbook, { bookType: 'xlsx', bookSST: false, type: 'binary' });
        var buffer = this.convertToBinary(wbout);
        this._saveAs(new Blob([buffer], { type: "application/octet-stream" }), name + ".xlsx");
    };
    ExcelConverter.prototype.convertToBinary = function (workbook) {
        var buffer = new ArrayBuffer(workbook.length);
        var view = new Uint8Array(buffer);
        for (var i = 0; i !== workbook.length; ++i)
            view[i] = workbook.charCodeAt(i) & 0xFF;
        return buffer;
    };
    ExcelConverter.$inject = ['saveAs', 'XLSX'];
    return ExcelConverter;
}());
Angular.module("angular-excel").service('excelConverter', ExcelConverter);
var WorkSheetBuilder = (function () {
    function WorkSheetBuilder(xlsx, values) {
        this.xlsx = xlsx;
        this.values = values;
        this.columns = [];
    }
    WorkSheetBuilder.prototype.addDateColumn = function (name, expression) {
        this.columns.push({ name: name, expression: expression, createCell: function (x) { return new DateCell(x); } });
        return this;
    };
    WorkSheetBuilder.prototype.addColumn = function (name, expression, createCell) {
        this.columns.push({ name: name, expression: expression, createCell: createCell });
        return this;
    };
    WorkSheetBuilder.prototype.setName = function (name) {
        this.name = name;
        return this;
    };
    WorkSheetBuilder.prototype.setWorkbook = function (workbook) {
        this.workbook = workbook;
        return this;
    };
    WorkSheetBuilder.prototype.build = function () {
        var _this = this;
        var worksheet = this.workbook ? this.workbook.addWorkSheet(this.name) : new WorkSheet(this.name, this.xlsx);
        for (var colIdx = 0; colIdx < this.columns.length; colIdx++) {
            var column = this.columns[colIdx];
            worksheet.setCell(0, colIdx, column.name);
        }
        this.values.forEach(function (x, rowIdx) {
            for (var colIdx = 0; colIdx < _this.columns.length; colIdx++) {
                var column = _this.columns[colIdx];
                var value = column.expression(x);
                var cell = column.createCell ? column.createCell(value) : null;
                worksheet.setCell(rowIdx + 1, colIdx, value, cell);
            }
        });
        return worksheet;
    };
    return WorkSheetBuilder;
}());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1leGNlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAudHMiLCIuLi9zcmMvY2VsbEFkZHJlc3MudHMiLCIuLi9zcmMvY2VsbFJhbmdlLnRzIiwiLi4vc3JjL2NlbGwudHMiLCIuLi9zcmMvd29ya3NoZWV0LnRzIiwiLi4vc3JjL3dvcmtib29rLnRzIiwiLi4vc3JjL2V4Y2VsQ29udmVydGVyLnRzIiwiLi4vc3JjL3dvcmtzaGVldEJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBVSxLQUFLLENBT2Q7QUFQRCxXQUFVLEtBQUs7SUFJWCxPQUFPLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUM7U0FDOUIsUUFBUSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUM7U0FDMUIsUUFBUSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNoQyxDQUFDLEVBUFMsS0FBSyxLQUFMLEtBQUssUUFPZDtBQ0ZEO0lBQ0kscUJBQVksR0FBVyxFQUFFLEdBQVc7UUFDaEMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNqQixDQUFDO0lBTUwsa0JBQUM7QUFBRCxDQUFDLEFBVkQsSUFVQztBQ1hEO0lBQ0k7UUFDSSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBT0QsOEJBQVUsR0FBVixVQUFXLE9BQXFCO1FBQzVCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckIsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFD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LElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDbEMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QyxDQUFDO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQyxDQUFDLEVBQUUsTUFBTTtZQUMxQixHQUFHLENBQUMsQ0FBQyxJQUFJLE1BQU0sR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLEtBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUM7Z0JBQzFELElBQUksTUFBTSxHQUFHLEtBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ2xDLElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25DLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUM7Z0JBQ2pFLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3ZELENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDckIsQ0FBQztJQUtMLHVCQUFDO0FBQUQsQ0FBQyxBQW5ERCxJQW1EQyIsInNvdXJjZXNDb250ZW50IjpbIm5hbWVzcGFjZSBleGNlbCB7XHJcbiAgICBkZWNsYXJlIHZhciBYTFNYOiBhbnk7XHJcbiAgICBkZWNsYXJlIHZhciBzYXZlQXM6IGFueTtcclxuXHJcbiAgICBBbmd1bGFyLm1vZHVsZShcImFuZ3VsYXItZXhjZWxcIiwgW10pXHJcbiAgICAgICAgLmNvbnN0YW50KFwic2F2ZUFzXCIsIHNhdmVBcylcclxuICAgICAgICAuY29uc3RhbnQoXCJYTFNYXCIsIFhMU1gpO1xyXG59IiwiaW50ZXJmYWNlIElDZWxsQWRkcmVzcyB7XHJcbiAgICBjOiBudW1iZXI7XHJcbiAgICByOiBudW1iZXI7XHJcbn1cclxuXHJcbmNsYXNzIENlbGxBZGRyZXNzIGltcGxlbWVudHMgSUNlbGxBZGRyZXNzIHtcclxuICAgIGNvbnN0cnVjdG9yKHJvdzogbnVtYmVyLCBjb2w6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuciA9IHJvdztcclxuICAgICAgICB0aGlzLmMgPSBjb2w7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gMC1pbmRleGVkIGNvbHVtblxyXG4gICAgYzogbnVtYmVyO1xyXG4gICAgLy8gMC1pbmRleGVkIHJvd1xyXG4gICAgcjogbnVtYmVyO1xyXG59IiwiaW50ZXJmYWNlIElDZWxsUmFuZ2Uge1xyXG4gICAgYWRkQWRkcmVzcyhhZGRyZXNzOiBJQ2VsbEFkZHJlc3MpO1xyXG59XHJcblxyXG5jbGFzcyBDZWxsUmFuZ2UgaW1wbGVtZW50cyBJQ2VsbFJhbmdlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMucyA9IG5ldyBDZWxsQWRkcmVzcygwLCAwKTtcclxuICAgICAgICB0aGlzLmUgPSBuZXcgQ2VsbEFkZHJlc3MoMCwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc3RhcnRcclxuICAgIHM6IENlbGxBZGRyZXNzO1xyXG4gICAgLy8gZW5kXHJcbiAgICBlOiBDZWxsQWRkcmVzcztcclxuXHJcbiAgICBhZGRBZGRyZXNzKGFkZHJlc3M6IElDZWxsQWRkcmVzcykge1xyXG4gICAgICAgIGlmIChhZGRyZXNzLnIgPCB0aGlzLnMucilcclxuICAgICAgICAgICAgdGhpcy5zLnIgPSBhZGRyZXNzLnI7XHJcbiAgICAgICAgaWYgKGFkZHJlc3MuYyA8IHRoaXMucy5jKVxyXG4gICAgICAgICAgICB0aGlzLnMuYyA9IGFkZHJlc3MuYztcclxuXHJcbiAgICAgICAgaWYgKGFkZHJlc3MuciA+IHRoaXMuZS5yKVxyXG4gICAgICAgICAgICB0aGlzLmUuciA9IGFkZHJlc3MucjtcclxuICAgICAgICBpZiAoYWRkcmVzcy5jID4gdGhpcy5lLmMpXHJcbiAgICAgICAgICAgIHRoaXMuZS5jID0gYWRkcmVzcy5jO1xyXG4gICAgfVxyXG59IiwiaW50ZXJmYWNlIElDZWxsIHtcclxuICAgIHY6IGFueTtcclxuICAgIHQ6IHN0cmluZztcclxufVxyXG5cclxuY2xhc3MgRGF0ZUNlbGwgaW1wbGVtZW50cyBJQ2VsbCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZT86IGFueSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMudiA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMudCA9ICdkJztcclxuICAgIH1cclxuXHJcbiAgICAvLyByYXcgdmFsdWUgKGRhdGEgdHlwZXMpXHJcbiAgICB2OiBhbnk7XHJcbiAgICAvLyBjZWxsIHR5cGVcclxuICAgIHQ6IHN0cmluZzsgLy8gRGF0YVR5cGVzXHJcbn1cclxuXHJcbmNsYXNzIFN0cmluZ0NlbGwgaW1wbGVtZW50cyBJQ2VsbCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZT86IGFueSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMudiA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMudCA9ICdzJztcclxuICAgIH1cclxuXHJcbiAgICAvLyByYXcgdmFsdWUgKGRhdGEgdHlwZXMpXHJcbiAgICB2OiBhbnk7XHJcbiAgICAvLyBjZWxsIHR5cGVcclxuICAgIHQ6IHN0cmluZzsgLy8gRGF0YVR5cGVzXHJcbn0iLCJpbnRlcmZhY2UgSVdvcmtTaGVldCB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBzZXRDZWxsKHJvdzogbnVtYmVyLCBjb2w6IG51bWJlciwgdmFsdWU6IGFueSwgY2VsbD86IElDZWxsKTtcclxuICAgIGdldENlbGwocm93OiBudW1iZXIsIGNvbDogbnVtYmVyKTogSUNlbGw7XHJcbn1cclxuXHJcbmNsYXNzIFdvcmtTaGVldCBpbXBsZW1lbnRzIElXb3JrU2hlZXQge1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIG5hbWUsIHByaXZhdGUgeGxzeDogYW55KSB7XHJcbiAgICAgICAgdGhpcy5fcmFuZ2UgPSBuZXcgQ2VsbFJhbmdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcmFuZ2U6IElDZWxsUmFuZ2U7XHJcblxyXG4gICAgc2V0Q2VsbChyb3c6IG51bWJlciwgY29sOiBudW1iZXIsIHZhbHVlOiBhbnksIGNlbGw/OiBJQ2VsbCkge1xyXG4gICAgICAgIHZhciBhZGRyZXNzID0gbmV3IENlbGxBZGRyZXNzKHJvdywgY29sKTtcclxuICAgICAgICBpZiAoIWNlbGwpXHJcbiAgICAgICAgICAgIGNlbGwgPSBuZXcgU3RyaW5nQ2VsbCh2YWx1ZSk7XHJcblxyXG4gICAgICAgIHZhciBjZWxsUmVmZXJlbmNlID0gdGhpcy54bHN4LnV0aWxzLmVuY29kZV9jZWxsKGFkZHJlc3MpO1xyXG4gICAgICAgIHRoaXNbY2VsbFJlZmVyZW5jZV0gPSBjZWxsO1xyXG5cclxuICAgICAgICB0aGlzLl9yYW5nZS5hZGRBZGRyZXNzKGFkZHJlc3MpO1xyXG4gICAgICAgIHRoaXNbXCIhcmVmXCJdID0gdGhpcy54bHN4LnV0aWxzLmVuY29kZV9yYW5nZSh0aGlzLl9yYW5nZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2VsbChyb3c6IG51bWJlciwgY29sOiBudW1iZXIpOiBJQ2VsbCB7XHJcbiAgICAgICAgdmFyIGFkZHJlc3MgPSBuZXcgQ2VsbEFkZHJlc3Mocm93LCBjb2wpO1xyXG4gICAgICAgIHZhciBjZWxsUmVmZXJlbmNlID0gdGhpcy54bHN4LnV0aWxzLmVuY29kZV9jZWxsKGFkZHJlc3MpO1xyXG4gICAgICAgIHZhciBjZWxsID0gdGhpc1tjZWxsUmVmZXJlbmNlXTtcclxuICAgICAgICByZXR1cm4gY2VsbDtcclxuICAgIH1cclxufSIsImludGVyZmFjZSBJV29ya0Jvb2sge1xyXG4gICAgYWRkV29ya1NoZWV0KHdzOiBzdHJpbmcgfCBXb3JrU2hlZXQpOiBJV29ya1NoZWV0O1xyXG5cclxufVxyXG5cclxuY2xhc3MgV29ya0Jvb2sgaW1wbGVtZW50cyBJV29ya0Jvb2sge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB4bHN4OiBhbnkpIHtcclxuICAgICAgICB0aGlzWydTaGVldE5hbWVzJ10gPSBbXTtcclxuICAgICAgICB0aGlzWydTaGVldHMnXSA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFdvcmtTaGVldCh3b3Jrc2hlZXQ6IHN0cmluZyB8IFdvcmtTaGVldCk6IElXb3JrU2hlZXQge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygd29ya3NoZWV0ID09IFwic3RyaW5nXCIpXHJcbiAgICAgICAgICAgIHdvcmtzaGVldCA9IG5ldyBXb3JrU2hlZXQod29ya3NoZWV0LCB0aGlzLnhsc3gpO1xyXG5cclxuICAgICAgICBjb25zdCBuYW1lID0gd29ya3NoZWV0Lm5hbWU7XHJcbiAgICAgICAgbGV0IHNoZWV0TmFtZXM6IHN0cmluZ1tdID0gdGhpc1snU2hlZXROYW1lcyddO1xyXG4gICAgICAgIHNoZWV0TmFtZXMucHVzaChuYW1lKTtcclxuICAgICAgICB0aGlzWydTaGVldHMnXVtuYW1lXSA9IHdvcmtzaGVldDtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gd29ya3NoZWV0O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3NoZWV0TmFtZXM6IHN0cmluZ1tdO1xyXG4gICAgcHJpdmF0ZSBfc2hlZXRzOiBzdHJpbmdbXVtdO1xyXG59IiwiaW50ZXJmYWNlIElFeGNlbENvbnZlcnRlciB7XHJcbiAgICBjcmVhdGUoKTogSVdvcmtCb29rO1xyXG4gICAgY3JlYXRlQnVpbGRlcjxUPih2YWx1ZXM6IFRbXSk6IFdvcmtTaGVldEJ1aWxkZXI8VD47XHJcbiAgICBzYXZlQXMobmFtZTogc3RyaW5nLCB3b3JrYm9vazogSVdvcmtCb29rKTtcclxufVxyXG5cclxuY2xhc3MgRXhjZWxDb252ZXJ0ZXIgaW1wbGVtZW50cyBJRXhjZWxDb252ZXJ0ZXIge1xyXG5cclxuICAgIHN0YXRpYyAkaW5qZWN0ID0gWydzYXZlQXMnLCAnWExTWCddO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX3NhdmVBczogYW55LCBwcml2YXRlIHhsc3g6IGFueSkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGUoKTogSVdvcmtCb29rIHtcclxuICAgICAgICB2YXIgd2IgPSBuZXcgV29ya0Jvb2sodGhpcy54bHN4KTtcclxuICAgICAgICByZXR1cm4gd2I7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlQnVpbGRlcjxUPih2YWx1ZXM6IFRbXSk6IFdvcmtTaGVldEJ1aWxkZXI8VD4ge1xyXG4gICAgICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgV29ya1NoZWV0QnVpbGRlcih0aGlzLnhsc3gsIHZhbHVlcyk7XHJcbiAgICAgICAgcmV0dXJuIGJ1aWxkZXI7XHJcbiAgICB9XHJcblxyXG4gICAgc2F2ZUFzKG5hbWU6IHN0cmluZywgd29ya2Jvb2s6IElXb3JrQm9vaykge1xyXG4gICAgICAgIHZhciB3Ym91dCA9IHRoaXMueGxzeC53cml0ZSh3b3JrYm9vaywgeyBib29rVHlwZTogJ3hsc3gnLCBib29rU1NUOiBmYWxzZSwgdHlwZTogJ2JpbmFyeScgfSk7XHJcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuY29udmVydFRvQmluYXJ5KHdib3V0KTtcclxuICAgICAgICB0aGlzLl9zYXZlQXMobmV3IEJsb2IoW2J1ZmZlcl0sIHsgdHlwZTogXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIiB9KSwgYCR7bmFtZX0ueGxzeGApO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY29udmVydFRvQmluYXJ5KHdvcmtib29rKSB7XHJcbiAgICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcih3b3JrYm9vay5sZW5ndGgpO1xyXG4gICAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSAhPT0gd29ya2Jvb2subGVuZ3RoOyArK2kpXHJcbiAgICAgICAgICAgIHZpZXdbaV0gPSB3b3JrYm9vay5jaGFyQ29kZUF0KGkpICYgMHhGRjtcclxuICAgICAgICByZXR1cm4gYnVmZmVyO1xyXG4gICAgfVxyXG59XHJcblxyXG5Bbmd1bGFyLm1vZHVsZShcImFuZ3VsYXItZXhjZWxcIikuc2VydmljZSgnZXhjZWxDb252ZXJ0ZXInLCBFeGNlbENvbnZlcnRlcik7IiwiaW50ZXJmYWNlIElXb3JrU2hlZXRCdWlsZGVyPFQ+IHtcclxuICAgIGFkZERhdGVDb2x1bW4obmFtZTogc3RyaW5nLCBleHByZXNzaW9uOiAoeDogVCkgPT4gYW55KTogSVdvcmtTaGVldEJ1aWxkZXI8VD47XHJcbiAgICBhZGRDb2x1bW4obmFtZTogc3RyaW5nLCBleHByZXNzaW9uOiAoeDogVCkgPT4gYW55LCBjcmVhdGVDZWxsPzogKHg6IGFueSkgPT4gSUNlbGwpOiBJV29ya1NoZWV0QnVpbGRlcjxUPjtcclxuICAgIHNldE5hbWUobmFtZTogc3RyaW5nKTogSVdvcmtTaGVldEJ1aWxkZXI8VD47XHJcbiAgICBzZXRXb3JrYm9vayh3b3JrYm9vazogSVdvcmtCb29rKTogSVdvcmtTaGVldEJ1aWxkZXI8VD47XHJcbiAgICBidWlsZCgpOiBJV29ya1NoZWV0O1xyXG59XHJcblxyXG5jbGFzcyBXb3JrU2hlZXRCdWlsZGVyPFQ+IGltcGxlbWVudHMgSVdvcmtTaGVldEJ1aWxkZXI8VD4ge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSB4bHN4OiBhbnksXHJcbiAgICAgICAgcHJpdmF0ZSB2YWx1ZXM6IFRbXVxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5jb2x1bW5zID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgYWRkRGF0ZUNvbHVtbihuYW1lOiBzdHJpbmcsIGV4cHJlc3Npb246ICh4OiBUKSA9PiBhbnkpOiBJV29ya1NoZWV0QnVpbGRlcjxUPiB7XHJcbiAgICAgICAgdGhpcy5jb2x1bW5zLnB1c2goeyBuYW1lOiBuYW1lLCBleHByZXNzaW9uOiBleHByZXNzaW9uLCBjcmVhdGVDZWxsOiB4ID0+IG5ldyBEYXRlQ2VsbCh4KSB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBhZGRDb2x1bW4obmFtZTogc3RyaW5nLCBleHByZXNzaW9uOiAoeDogVCkgPT4gYW55LCBjcmVhdGVDZWxsPzogKHg6IGFueSkgPT4gSUNlbGwpOiBJV29ya1NoZWV0QnVpbGRlcjxUPiB7XHJcbiAgICAgICAgdGhpcy5jb2x1bW5zLnB1c2goeyBuYW1lOiBuYW1lLCBleHByZXNzaW9uOiBleHByZXNzaW9uLCBjcmVhdGVDZWxsOiBjcmVhdGVDZWxsIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHNldE5hbWUobmFtZTogc3RyaW5nKTogSVdvcmtTaGVldEJ1aWxkZXI8VD4ge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0V29ya2Jvb2sod29ya2Jvb2s6IElXb3JrQm9vayk6IElXb3JrU2hlZXRCdWlsZGVyPFQ+IHtcclxuICAgICAgICB0aGlzLndvcmtib29rID0gd29ya2Jvb2s7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgYnVpbGQoKTogSVdvcmtTaGVldCB7XHJcbiAgICAgICAgdmFyIHdvcmtzaGVldCA9IHRoaXMud29ya2Jvb2sgPyB0aGlzLndvcmtib29rLmFkZFdvcmtTaGVldCh0aGlzLm5hbWUpIDogbmV3IFdvcmtTaGVldCh0aGlzLm5hbWUsIHRoaXMueGxzeCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGNvbElkeCA9IDA7IGNvbElkeCA8IHRoaXMuY29sdW1ucy5sZW5ndGg7IGNvbElkeCsrKSB7XHJcbiAgICAgICAgICAgIGxldCBjb2x1bW4gPSB0aGlzLmNvbHVtbnNbY29sSWR4XTtcclxuICAgICAgICAgICAgd29ya3NoZWV0LnNldENlbGwoMCwgY29sSWR4LCBjb2x1bW4ubmFtZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnZhbHVlcy5mb3JFYWNoKCh4LCByb3dJZHgpID0+IHtcclxuICAgICAgICAgICAgZm9yIChsZXQgY29sSWR4ID0gMDsgY29sSWR4IDwgdGhpcy5jb2x1bW5zLmxlbmd0aDsgY29sSWR4KyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb2x1bW4gPSB0aGlzLmNvbHVtbnNbY29sSWR4XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY29sdW1uLmV4cHJlc3Npb24oeCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gY29sdW1uLmNyZWF0ZUNlbGwgPyBjb2x1bW4uY3JlYXRlQ2VsbCh2YWx1ZSkgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgd29ya3NoZWV0LnNldENlbGwocm93SWR4ICsgMSwgY29sSWR4LCB2YWx1ZSwgY2VsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHdvcmtzaGVldDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG5hbWU6IHN0cmluZztcclxuICAgIHByaXZhdGUgd29ya2Jvb2s6IElXb3JrQm9vaztcclxuICAgIHByaXZhdGUgY29sdW1uczogeyBuYW1lOiBzdHJpbmcsIGV4cHJlc3Npb246ICh4OiBUKSA9PiBhbnksIGNyZWF0ZUNlbGw/OiAoeDogYW55KSA9PiBJQ2VsbCB9W107XHJcbn0iXX0=