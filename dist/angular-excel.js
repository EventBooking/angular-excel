var excel;
(function (excel) {
    Angular.module("angular-excel", [])
        .constant("saveAs", saveAs)
        .constant("XLSX", XLSX);
})(excel || (excel = {}));
var CellAddress = (function () {
    function CellAddress(row, col) {
        this.r = row;
        this.c = col;
    }
    return CellAddress;
}());
var CellRange = (function () {
    function CellRange() {
        this.s = new CellAddress(0, 0);
        this.e = new CellAddress(0, 0);
    }
    CellRange.prototype.addAddress = function (address) {
        if (address.r < this.s.r)
            this.s.r = address.r;
        if (address.c < this.s.c)
            this.s.c = address.c;
        if (address.r > this.e.r)
            this.e.r = address.r;
        if (address.c > this.e.c)
            this.e.c = address.c;
    };
    return CellRange;
}());
var DateCell = (function () {
    function DateCell(value) {
        if (value == null)
            return;
        this.v = value;
        this.t = 'd';
    }
    return DateCell;
}());
var StringCell = (function () {
    function StringCell(value) {
        if (value == null)
            return;
        this.v = value;
        this.t = 's';
    }
    return StringCell;
}());
var WorkSheet = (function () {
    function WorkSheet(name, xlsx) {
        this.name = name;
        this.xlsx = xlsx;
        this._range = new CellRange();
    }
    WorkSheet.prototype.setCell = function (row, col, value, cell) {
        var address = new CellAddress(row, col);
        if (!cell)
            cell = new StringCell(value);
        var cellReference = this.xlsx.utils.encode_cell(address);
        this[cellReference] = cell;
        this._range.addAddress(address);
        this["!ref"] = this.xlsx.utils.encode_range(this._range);
    };
    WorkSheet.prototype.getCell = function (row, col) {
        var address = new CellAddress(row, col);
        var cellReference = this.xlsx.utils.encode_cell(address);
        var cell = this[cellReference];
        return cell;
    };
    return WorkSheet;
}());
var WorkBook = (function () {
    function WorkBook(xlsx) {
        this.xlsx = xlsx;
        this['SheetNames'] = [];
        this['Sheets'] = {};
    }
    WorkBook.prototype.addWorkSheet = function (name) {
        var worksheet = new WorkSheet(name, this.xlsx);
        var sheetNames = this['SheetNames'];
        sheetNames.push(name);
        this['Sheets'][name] = worksheet;
        return worksheet;
    };
    return WorkBook;
}());
var ExcelConverter = (function () {
    function ExcelConverter(_saveAs, xlsx) {
        this._saveAs = _saveAs;
        this.xlsx = xlsx;
    }
    ExcelConverter.prototype.create = function () {
        var wb = new WorkBook(this.xlsx);
        return wb;
    };
    ExcelConverter.prototype.saveAs = function (name, workbook) {
        var wbout = this.xlsx.write(workbook, { bookType: 'xlsx', bookSST: false, type: 'binary' });
        var buffer = this.convertToBinary(wbout);
        this._saveAs(new Blob([buffer], { type: "application/octet-stream" }), name + ".xlsx");
    };
    ExcelConverter.prototype.convertToBinary = function (workbook) {
        var buffer = new ArrayBuffer(workbook.length);
        var view = new Uint8Array(buffer);
        for (var i = 0; i !== workbook.length; ++i)
            view[i] = workbook.charCodeAt(i) & 0xFF;
        return buffer;
    };
    ExcelConverter.$inject = ['saveAs', 'XLSX'];
    return ExcelConverter;
}());
Angular.module("angular-excel").service('excelConverter', ExcelConverter);
//# sourceMappingURL=data:application/json;base64,