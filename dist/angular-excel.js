var excel;
(function (excel) {
    Angular.module("angular-excel", [])
        .constant("saveAs", saveAs)
        .constant("XLSX", XLSX)
        .constant("moment", moment)
        .constant("currency", currency)
        .constant("accounting", accounting);
})(excel || (excel = {}));
var CellAddress = (function () {
    function CellAddress(row, col) {
        this.r = row;
        this.c = col;
    }
    return CellAddress;
}());
var CellRange = (function () {
    function CellRange() {
        this.s = new CellAddress(0, 0);
        this.e = new CellAddress(0, 0);
    }
    CellRange.prototype.addAddress = function (address) {
        if (address.r < this.s.r)
            this.s.r = address.r;
        if (address.c < this.s.c)
            this.s.c = address.c;
        if (address.r > this.e.r)
            this.e.r = address.r;
        if (address.c > this.e.c)
            this.e.c = address.c;
    };
    return CellRange;
}());
// see: https://github.com/SheetJS/js-xlsx#cell-object
var Cell = (function () {
    function Cell() {
    }
    return Cell;
}());
var DateCell = (function () {
    function DateCell(isoDate) {
        if (isoDate == null)
            return;
        this.v = isoDate.toString();
        this.t = 'd';
    }
    return DateCell;
}());
var CurrencyCell = (function () {
    function CurrencyCell(value, format) {
        if (value == null)
            return;
        this.v = value.toString();
        this.t = 'n';
        this.z = format;
    }
    return CurrencyCell;
}());
var TimeCell = (function () {
    function TimeCell(isoTime, format) {
        if (format === void 0) { format = "h:mm AM/PM"; }
        if (isoTime == null)
            return;
        var values = isoTime.toString().split(":");
        var hourSeconds = Number(values[0]) * TimeCell.SECONDS_IN_HOUR;
        var minuteSeconds = Number(values[1]) * TimeCell.SECONDS_IN_MINUTE;
        var seconds = Number(values[2]);
        var totalSeconds = hourSeconds + minuteSeconds + seconds;
        var value = totalSeconds / TimeCell.SECONDS_IN_DAY;
        this.v = value.toString();
        this.t = 'n';
        this.z = format;
    }
    TimeCell.SECONDS_IN_DAY = 86400;
    TimeCell.SECONDS_IN_HOUR = 3600;
    TimeCell.SECONDS_IN_MINUTE = 60;
    return TimeCell;
}());
var NumberCell = (function () {
    function NumberCell(value) {
        if (value == null)
            return;
        this.v = value.toString();
        this.t = 'n';
    }
    return NumberCell;
}());
var StringCell = (function () {
    function StringCell(value) {
        if (value == null)
            return;
        this.v = value.toString();
        this.t = 's';
    }
    return StringCell;
}());
var WorkSheet = (function () {
    function WorkSheet(name, xlsx) {
        this.name = name;
        this.xlsx = xlsx;
        this._range = new CellRange();
    }
    WorkSheet.prototype.setCell = function (row, col, value, cell) {
        var address = new CellAddress(row, col);
        if (!cell)
            cell = new StringCell(value);
        var cellReference = this.xlsx.utils.encode_cell(address);
        this[cellReference] = cell;
        this._range.addAddress(address);
        this["!ref"] = this.xlsx.utils.encode_range(this._range);
    };
    WorkSheet.prototype.getCell = function (row, col) {
        var address = new CellAddress(row, col);
        var cellReference = this.xlsx.utils.encode_cell(address);
        var cell = this[cellReference];
        return cell;
    };
    return WorkSheet;
}());
var WorkBook = (function () {
    function WorkBook(xlsx) {
        this.xlsx = xlsx;
        this['SheetNames'] = [];
        this['Sheets'] = {};
    }
    WorkBook.prototype.addWorkSheet = function (worksheet) {
        if (typeof worksheet == "string")
            worksheet = new WorkSheet(worksheet, this.xlsx);
        var name = worksheet.name;
        var sheetNames = this['SheetNames'];
        sheetNames.push(name);
        this['Sheets'][name] = worksheet;
        return worksheet;
    };
    return WorkBook;
}());
var WorkSheetBuilder = (function () {
    function WorkSheetBuilder(xlsx, moment, currency, accounting, values) {
        this.xlsx = xlsx;
        this.moment = moment;
        this.currency = currency;
        this.accounting = accounting;
        this.values = values;
        this.columns = [];
    }
    WorkSheetBuilder.prototype.addTimeColumn = function (name, expression, format) {
        this.columns.push({ name: name, expression: expression, createCell: function (x) { return new TimeCell(x, format); } });
        return this;
    };
    WorkSheetBuilder.prototype.addDateColumn = function (name, expression) {
        this.columns.push({
            name: name,
            expression: expression,
            createCell: function (x) { return new DateCell(x); }
        });
        return this;
    };
    WorkSheetBuilder.prototype.addNumberColumn = function (name, expression) {
        this.columns.push({ name: name, expression: expression, createCell: function (x) { return new NumberCell(x); } });
        return this;
    };
    WorkSheetBuilder.prototype.getCurrencyFormat = function (currency) {
        var currencySymbol = this.currency.symbolize(currency);
        var currencySettings = this.accounting.settings.currency;
        var currencyFormat = currencySymbol + "#" + currencySettings.thousand + "##0" + currencySettings.decimal + "00";
        return currencyFormat;
    };
    WorkSheetBuilder.prototype.addCurrencyColumn = function (name, expression, getCurrency) {
        var _this = this;
        this.columns.push({
            name: name, expression: expression, createCell: function (value, x) {
                var format = getCurrency ? _this.getCurrencyFormat(getCurrency(x)) : _this.currencyFormat;
                return new CurrencyCell(value, format);
            }
        });
        return this;
    };
    WorkSheetBuilder.prototype.addColumn = function (name, expression, createCell) {
        this.columns.push({ name: name, expression: expression, createCell: createCell });
        return this;
    };
    WorkSheetBuilder.prototype.setCurrency = function (currency) {
        this.currencyFormat = this.getCurrencyFormat(currency);
        return this;
    };
    WorkSheetBuilder.prototype.setName = function (name) {
        this.name = name;
        return this;
    };
    WorkSheetBuilder.prototype.build = function () {
        var _this = this;
        var worksheet = new WorkSheet(this.name, this.xlsx);
        for (var colIdx = 0; colIdx < this.columns.length; colIdx++) {
            var column = this.columns[colIdx];
            worksheet.setCell(0, colIdx, column.name);
        }
        this.values.forEach(function (x, rowIdx) {
            for (var colIdx = 0; colIdx < _this.columns.length; colIdx++) {
                var column = _this.columns[colIdx];
                var value = column.expression(x);
                var cell = column.createCell ? column.createCell(value, x) : null;
                worksheet.setCell(rowIdx + 1, colIdx, value, cell);
            }
        });
        return worksheet;
    };
    return WorkSheetBuilder;
}());
var ExcelConverter = (function () {
    function ExcelConverter(_saveAs, xlsx, moment, currency, accounting) {
        this._saveAs = _saveAs;
        this.xlsx = xlsx;
        this.moment = moment;
        this.currency = currency;
        this.accounting = accounting;
    }
    ExcelConverter.prototype.create = function () {
        var wb = new WorkBook(this.xlsx);
        return wb;
    };
    ExcelConverter.prototype.createBuilder = function (values) {
        var builder = new WorkSheetBuilder(this.xlsx, this.moment, this.currency, this.accounting, values);
        return builder;
    };
    ExcelConverter.prototype.saveAs = function (name, workbook) {
        var wbout = this.xlsx.write(workbook, { bookType: 'xlsx', bookSST: true, type: 'binary' });
        var buffer = this.convertToBinary(wbout);
        this._saveAs(new Blob([buffer], { type: "application/octet-stream" }), name + ".xlsx");
    };
    ExcelConverter.prototype.convertToBinary = function (workbook) {
        var buffer = new ArrayBuffer(workbook.length);
        var view = new Uint8Array(buffer);
        for (var i = 0; i !== workbook.length; ++i)
            view[i] = workbook.charCodeAt(i) & 0xFF;
        return buffer;
    };
    ExcelConverter.$inject = ['saveAs', 'XLSX', 'moment', 'currency', 'accounting'];
    return ExcelConverter;
}());
Angular.module("angular-excel").service('excelConverter', ExcelConverter);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1leGNlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAudHMiLCIuLi9zcmMvY2VsbEFkZHJlc3MudHMiLCIuLi9zcmMvY2VsbFJhbmdlLnRzIiwiLi4vc3JjL2NlbGwudHMiLCIuLi9zcmMvd29ya3NoZWV0LnRzIiwiLi4vc3JjL3dvcmtib29rLnRzIiwiLi4vc3JjL3dvcmtzaGVldEJ1aWxkZXIudHMiLCIuLi9zcmMvZXhjZWxDb252ZXJ0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBVSxLQUFLLENBYWQ7QUFiRCxXQUFVLEtBQUs7SUFPWCxPQUFPLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUM7U0FDOUIsUUFBUSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUM7U0FDMUIsUUFBUSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUM7U0FDdEIsUUFBUSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUM7U0FDMUIsUUFBUSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUM7U0FDOUIsUUFBUSxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztBQUM1QyxDQUFDLEVBYlMsS0FBSyxLQUFMLEtBQUssUUFhZDtBQ1JEO0lBQ0kscUJBQVksR0FBVyxFQUFFLEdBQVc7UUFDaEMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNqQixDQUFDO0lBTUwsa0JBQUM7QUFBRCxDQUFDLEFBVkQsSUFVQztBQ1hEO0lBQ0k7UUFDSSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBT0QsOEJBQVUsR0FBVixVQUFXLE9BQXFCO1FBQzVCLEVB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R0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDM0YsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsMEJBQTBCLEVBQUUsQ0FBQyxFQUFLLElBQUksVUFBTyxDQUFDLENBQUM7SUFDM0YsQ0FBQztJQUVPLHdDQUFlLEdBQXZCLFVBQXdCLFFBQVE7UUFDNUIsSUFBSSxNQUFNLEdBQUcsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLElBQUksSUFBSSxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7WUFDdEMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQTVCTSxzQkFBTyxHQUFHLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBNkI1RSxxQkFBQztDQUFBLEFBL0JELElBK0JDO0FBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsY0FBYyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJuYW1lc3BhY2UgZXhjZWwge1xyXG4gICAgZGVjbGFyZSB2YXIgWExTWDogYW55O1xyXG4gICAgZGVjbGFyZSB2YXIgc2F2ZUFzOiBhbnk7XHJcbiAgICBkZWNsYXJlIHZhciBtb21lbnQ6IGFueTtcclxuICAgIGRlY2xhcmUgdmFyIGN1cnJlbmN5OiBhbnk7XHJcbiAgICBkZWNsYXJlIHZhciBhY2NvdW50aW5nOiBhbnk7XHJcblxyXG4gICAgQW5ndWxhci5tb2R1bGUoXCJhbmd1bGFyLWV4Y2VsXCIsIFtdKVxyXG4gICAgICAgIC5jb25zdGFudChcInNhdmVBc1wiLCBzYXZlQXMpXHJcbiAgICAgICAgLmNvbnN0YW50KFwiWExTWFwiLCBYTFNYKVxyXG4gICAgICAgIC5jb25zdGFudChcIm1vbWVudFwiLCBtb21lbnQpXHJcbiAgICAgICAgLmNvbnN0YW50KFwiY3VycmVuY3lcIiwgY3VycmVuY3kpXHJcbiAgICAgICAgLmNvbnN0YW50KFwiYWNjb3VudGluZ1wiLCBhY2NvdW50aW5nKTtcclxufSIsImludGVyZmFjZSBJQ2VsbEFkZHJlc3Mge1xyXG4gICAgYzogbnVtYmVyO1xyXG4gICAgcjogbnVtYmVyO1xyXG59XHJcblxyXG5jbGFzcyBDZWxsQWRkcmVzcyBpbXBsZW1lbnRzIElDZWxsQWRkcmVzcyB7XHJcbiAgICBjb25zdHJ1Y3Rvcihyb3c6IG51bWJlciwgY29sOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnIgPSByb3c7XHJcbiAgICAgICAgdGhpcy5jID0gY29sO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIDAtaW5kZXhlZCBjb2x1bW5cclxuICAgIGM6IG51bWJlcjtcclxuICAgIC8vIDAtaW5kZXhlZCByb3dcclxuICAgIHI6IG51bWJlcjtcclxufSIsImludGVyZmFjZSBJQ2VsbFJhbmdlIHtcclxuICAgIGFkZEFkZHJlc3MoYWRkcmVzczogSUNlbGxBZGRyZXNzKTtcclxufVxyXG5cclxuY2xhc3MgQ2VsbFJhbmdlIGltcGxlbWVudHMgSUNlbGxSYW5nZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnMgPSBuZXcgQ2VsbEFkZHJlc3MoMCwgMCk7XHJcbiAgICAgICAgdGhpcy5lID0gbmV3IENlbGxBZGRyZXNzKDAsIDApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHN0YXJ0XHJcbiAgICBzOiBDZWxsQWRkcmVzcztcclxuICAgIC8vIGVuZFxyXG4gICAgZTogQ2VsbEFkZHJlc3M7XHJcblxyXG4gICAgYWRkQWRkcmVzcyhhZGRyZXNzOiBJQ2VsbEFkZHJlc3MpIHtcclxuICAgICAgICBpZiAoYWRkcmVzcy5yIDwgdGhpcy5zLnIpXHJcbiAgICAgICAgICAgIHRoaXMucy5yID0gYWRkcmVzcy5yO1xyXG4gICAgICAgIGlmIChhZGRyZXNzLmMgPCB0aGlzLnMuYylcclxuICAgICAgICAgICAgdGhpcy5zLmMgPSBhZGRyZXNzLmM7XHJcblxyXG4gICAgICAgIGlmIChhZGRyZXNzLnIgPiB0aGlzLmUucilcclxuICAgICAgICAgICAgdGhpcy5lLnIgPSBhZGRyZXNzLnI7XHJcbiAgICAgICAgaWYgKGFkZHJlc3MuYyA+IHRoaXMuZS5jKVxyXG4gICAgICAgICAgICB0aGlzLmUuYyA9IGFkZHJlc3MuYztcclxuICAgIH1cclxufSIsIi8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL1NoZWV0SlMvanMteGxzeCNjZWxsLW9iamVjdFxyXG5cclxuaW50ZXJmYWNlIElDZWxsIHtcclxuICAgIHY6IHN0cmluZztcclxuICAgIHc6IHN0cmluZztcclxuICAgIHQ6IHN0cmluZztcclxuICAgIGY6IHN0cmluZztcclxuICAgIEY6IHN0cmluZztcclxuICAgIHI6IHN0cmluZztcclxuICAgIGg6IHN0cmluZztcclxuICAgIGM6IHN0cmluZztcclxuICAgIHo6IHN0cmluZztcclxuICAgIGw6IHN0cmluZztcclxuICAgIHM6IHN0cmluZztcclxufVxyXG5cclxuY2xhc3MgQ2VsbCBpbXBsZW1lbnRzIElDZWxsIHtcclxuICAgIHY6IHN0cmluZztcclxuICAgIHc6IHN0cmluZztcclxuICAgIHQ6IHN0cmluZztcclxuICAgIGY6IHN0cmluZztcclxuICAgIEY6IHN0cmluZztcclxuICAgIHI6IHN0cmluZztcclxuICAgIGg6IHN0cmluZztcclxuICAgIGM6IHN0cmluZztcclxuICAgIHo6IHN0cmluZztcclxuICAgIGw6IHN0cmluZztcclxuICAgIHM6IHN0cmluZztcclxufVxyXG5cclxuY2xhc3MgRGF0ZUNlbGwgaW1wbGVtZW50cyBJQ2VsbCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihpc29EYXRlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAoaXNvRGF0ZSA9PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMudiA9IGlzb0RhdGUudG9TdHJpbmcoKTtcclxuICAgICAgICB0aGlzLnQgPSAnZCc7XHJcbiAgICB9XHJcblxyXG4gICAgdjogc3RyaW5nO1xyXG4gICAgdzogc3RyaW5nO1xyXG4gICAgdDogc3RyaW5nO1xyXG4gICAgZjogc3RyaW5nO1xyXG4gICAgRjogc3RyaW5nO1xyXG4gICAgcjogc3RyaW5nO1xyXG4gICAgaDogc3RyaW5nO1xyXG4gICAgYzogc3RyaW5nO1xyXG4gICAgejogc3RyaW5nO1xyXG4gICAgbDogc3RyaW5nO1xyXG4gICAgczogc3RyaW5nO1xyXG59XHJcblxyXG5jbGFzcyBDdXJyZW5jeUNlbGwgaW1wbGVtZW50cyBJQ2VsbCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZTogc3RyaW5nLCBmb3JtYXQ6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMudiA9IHZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgdGhpcy50ID0gJ24nO1xyXG4gICAgICAgIHRoaXMueiA9IGZvcm1hdDtcclxuICAgIH1cclxuXHJcbiAgICB2OiBzdHJpbmc7XHJcbiAgICB3OiBzdHJpbmc7XHJcbiAgICB0OiBzdHJpbmc7XHJcbiAgICBmOiBzdHJpbmc7XHJcbiAgICBGOiBzdHJpbmc7XHJcbiAgICByOiBzdHJpbmc7XHJcbiAgICBoOiBzdHJpbmc7XHJcbiAgICBjOiBzdHJpbmc7XHJcbiAgICB6OiBzdHJpbmc7XHJcbiAgICBsOiBzdHJpbmc7XHJcbiAgICBzOiBzdHJpbmc7XHJcbn1cclxuXHJcbmNsYXNzIFRpbWVDZWxsIGltcGxlbWVudHMgSUNlbGwge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgU0VDT05EU19JTl9EQVkgPSA4NjQwMDtcclxuICAgIHByaXZhdGUgc3RhdGljIFNFQ09ORFNfSU5fSE9VUiA9IDM2MDA7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBTRUNPTkRTX0lOX01JTlVURSA9IDYwO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGlzb1RpbWU6IHN0cmluZywgZm9ybWF0OiBzdHJpbmcgPSBcImg6bW0gQU0vUE1cIikge1xyXG4gICAgICAgIGlmIChpc29UaW1lID09IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3QgdmFsdWVzID0gaXNvVGltZS50b1N0cmluZygpLnNwbGl0KFwiOlwiKTtcclxuICAgICAgICBjb25zdCBob3VyU2Vjb25kcyA9IE51bWJlcih2YWx1ZXNbMF0pICogVGltZUNlbGwuU0VDT05EU19JTl9IT1VSO1xyXG4gICAgICAgIGNvbnN0IG1pbnV0ZVNlY29uZHMgPSBOdW1iZXIodmFsdWVzWzFdKSAqIFRpbWVDZWxsLlNFQ09ORFNfSU5fTUlOVVRFO1xyXG4gICAgICAgIGNvbnN0IHNlY29uZHMgPSBOdW1iZXIodmFsdWVzWzJdKTtcclxuICAgICAgICBjb25zdCB0b3RhbFNlY29uZHMgPSBob3VyU2Vjb25kcyArIG1pbnV0ZVNlY29uZHMgKyBzZWNvbmRzO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdG90YWxTZWNvbmRzIC8gVGltZUNlbGwuU0VDT05EU19JTl9EQVk7XHJcblxyXG4gICAgICAgIHRoaXMudiA9IHZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgdGhpcy50ID0gJ24nO1xyXG4gICAgICAgIHRoaXMueiA9IGZvcm1hdDtcclxuICAgIH1cclxuXHJcbiAgICB2OiBzdHJpbmc7XHJcbiAgICB3OiBzdHJpbmc7XHJcbiAgICB0OiBzdHJpbmc7XHJcbiAgICBmOiBzdHJpbmc7XHJcbiAgICBGOiBzdHJpbmc7XHJcbiAgICByOiBzdHJpbmc7XHJcbiAgICBoOiBzdHJpbmc7XHJcbiAgICBjOiBzdHJpbmc7XHJcbiAgICB6OiBzdHJpbmc7XHJcbiAgICBsOiBzdHJpbmc7XHJcbiAgICBzOiBzdHJpbmc7XHJcbn1cclxuXHJcbmNsYXNzIE51bWJlckNlbGwgaW1wbGVtZW50cyBJQ2VsbCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZTogbnVtYmVyIHwgc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy52ID0gdmFsdWUudG9TdHJpbmcoKTtcclxuICAgICAgICB0aGlzLnQgPSAnbic7XHJcbiAgICB9XHJcblxyXG4gICAgdjogc3RyaW5nO1xyXG4gICAgdzogc3RyaW5nO1xyXG4gICAgdDogc3RyaW5nO1xyXG4gICAgZjogc3RyaW5nO1xyXG4gICAgRjogc3RyaW5nO1xyXG4gICAgcjogc3RyaW5nO1xyXG4gICAgaDogc3RyaW5nO1xyXG4gICAgYzogc3RyaW5nO1xyXG4gICAgejogc3RyaW5nO1xyXG4gICAgbDogc3RyaW5nO1xyXG4gICAgczogc3RyaW5nO1xyXG59XHJcblxyXG5jbGFzcyBTdHJpbmdDZWxsIGltcGxlbWVudHMgSUNlbGwge1xyXG4gICAgY29uc3RydWN0b3IodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMudiA9IHZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgdGhpcy50ID0gJ3MnO1xyXG4gICAgfVxyXG5cclxuICAgIHY6IHN0cmluZztcclxuICAgIHc6IHN0cmluZztcclxuICAgIHQ6IHN0cmluZztcclxuICAgIGY6IHN0cmluZztcclxuICAgIEY6IHN0cmluZztcclxuICAgIHI6IHN0cmluZztcclxuICAgIGg6IHN0cmluZztcclxuICAgIGM6IHN0cmluZztcclxuICAgIHo6IHN0cmluZztcclxuICAgIGw6IHN0cmluZztcclxuICAgIHM6IHN0cmluZztcclxufSIsImludGVyZmFjZSBJV29ya1NoZWV0IHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIHNldENlbGwocm93OiBudW1iZXIsIGNvbDogbnVtYmVyLCB2YWx1ZTogYW55LCBjZWxsPzogSUNlbGwpO1xyXG4gICAgZ2V0Q2VsbChyb3c6IG51bWJlciwgY29sOiBudW1iZXIpOiBJQ2VsbDtcclxufVxyXG5cclxuY2xhc3MgV29ya1NoZWV0IGltcGxlbWVudHMgSVdvcmtTaGVldCB7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbmFtZSwgcHJpdmF0ZSB4bHN4OiBhbnkpIHtcclxuICAgICAgICB0aGlzLl9yYW5nZSA9IG5ldyBDZWxsUmFuZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9yYW5nZTogSUNlbGxSYW5nZTtcclxuXHJcbiAgICBzZXRDZWxsKHJvdzogbnVtYmVyLCBjb2w6IG51bWJlciwgdmFsdWU6IGFueSwgY2VsbD86IElDZWxsKSB7XHJcbiAgICAgICAgdmFyIGFkZHJlc3MgPSBuZXcgQ2VsbEFkZHJlc3Mocm93LCBjb2wpO1xyXG4gICAgICAgIGlmICghY2VsbClcclxuICAgICAgICAgICAgY2VsbCA9IG5ldyBTdHJpbmdDZWxsKHZhbHVlKTtcclxuXHJcbiAgICAgICAgdmFyIGNlbGxSZWZlcmVuY2UgPSB0aGlzLnhsc3gudXRpbHMuZW5jb2RlX2NlbGwoYWRkcmVzcyk7XHJcbiAgICAgICAgdGhpc1tjZWxsUmVmZXJlbmNlXSA9IGNlbGw7XHJcblxyXG4gICAgICAgIHRoaXMuX3JhbmdlLmFkZEFkZHJlc3MoYWRkcmVzcyk7XHJcbiAgICAgICAgdGhpc1tcIiFyZWZcIl0gPSB0aGlzLnhsc3gudXRpbHMuZW5jb2RlX3JhbmdlKHRoaXMuX3JhbmdlKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDZWxsKHJvdzogbnVtYmVyLCBjb2w6IG51bWJlcik6IElDZWxsIHtcclxuICAgICAgICB2YXIgYWRkcmVzcyA9IG5ldyBDZWxsQWRkcmVzcyhyb3csIGNvbCk7XHJcbiAgICAgICAgdmFyIGNlbGxSZWZlcmVuY2UgPSB0aGlzLnhsc3gudXRpbHMuZW5jb2RlX2NlbGwoYWRkcmVzcyk7XHJcbiAgICAgICAgdmFyIGNlbGwgPSB0aGlzW2NlbGxSZWZlcmVuY2VdO1xyXG4gICAgICAgIHJldHVybiBjZWxsO1xyXG4gICAgfVxyXG59IiwiaW50ZXJmYWNlIElXb3JrQm9vayB7XHJcbiAgICBhZGRXb3JrU2hlZXQod3M6IHN0cmluZyB8IElXb3JrU2hlZXQpOiBJV29ya1NoZWV0O1xyXG5cclxufVxyXG5cclxuY2xhc3MgV29ya0Jvb2sgaW1wbGVtZW50cyBJV29ya0Jvb2sge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB4bHN4OiBhbnkpIHtcclxuICAgICAgICB0aGlzWydTaGVldE5hbWVzJ10gPSBbXTtcclxuICAgICAgICB0aGlzWydTaGVldHMnXSA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFdvcmtTaGVldCh3b3Jrc2hlZXQ6IHN0cmluZyB8IElXb3JrU2hlZXQpOiBJV29ya1NoZWV0IHtcclxuICAgICAgICBpZiAodHlwZW9mIHdvcmtzaGVldCA9PSBcInN0cmluZ1wiKVxyXG4gICAgICAgICAgICB3b3Jrc2hlZXQgPSBuZXcgV29ya1NoZWV0KHdvcmtzaGVldCwgdGhpcy54bHN4KTtcclxuXHJcbiAgICAgICAgY29uc3QgbmFtZSA9IHdvcmtzaGVldC5uYW1lO1xyXG4gICAgICAgIGxldCBzaGVldE5hbWVzOiBzdHJpbmdbXSA9IHRoaXNbJ1NoZWV0TmFtZXMnXTtcclxuICAgICAgICBzaGVldE5hbWVzLnB1c2gobmFtZSk7XHJcbiAgICAgICAgdGhpc1snU2hlZXRzJ11bbmFtZV0gPSB3b3Jrc2hlZXQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHdvcmtzaGVldDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9zaGVldE5hbWVzOiBzdHJpbmdbXTtcclxuICAgIHByaXZhdGUgX3NoZWV0czogc3RyaW5nW11bXTtcclxufSIsImludGVyZmFjZSBJV29ya1NoZWV0QnVpbGRlcjxUPiB7XHJcbiAgICBhZGRUaW1lQ29sdW1uKG5hbWU6IHN0cmluZywgZXhwcmVzc2lvbjogKHg6IFQpID0+IGFueSwgZm9ybWF0Pzogc3RyaW5nKTogSVdvcmtTaGVldEJ1aWxkZXI8VD5cclxuICAgIGFkZERhdGVDb2x1bW4obmFtZTogc3RyaW5nLCBleHByZXNzaW9uOiAoeDogVCkgPT4gYW55KTogSVdvcmtTaGVldEJ1aWxkZXI8VD47XHJcbiAgICBhZGROdW1iZXJDb2x1bW4obmFtZTogc3RyaW5nLCBleHByZXNzaW9uOiAoeDogVCkgPT4gYW55KTogSVdvcmtTaGVldEJ1aWxkZXI8VD5cclxuICAgIGFkZEN1cnJlbmN5Q29sdW1uKG5hbWU6IHN0cmluZywgZXhwcmVzc2lvbjogKHg6IFQpID0+IGFueSwgZ2V0Q3VycmVuY3k/OiAoeDogVCkgPT4gc3RyaW5nKTogSVdvcmtTaGVldEJ1aWxkZXI8VD5cclxuICAgIGFkZENvbHVtbihuYW1lOiBzdHJpbmcsIGV4cHJlc3Npb246ICh4OiBUKSA9PiBhbnksIGNyZWF0ZUNlbGw/OiAoeDogYW55KSA9PiBJQ2VsbCk6IElXb3JrU2hlZXRCdWlsZGVyPFQ+O1xyXG4gICAgc2V0TmFtZShuYW1lOiBzdHJpbmcpOiBJV29ya1NoZWV0QnVpbGRlcjxUPjtcclxuICAgIHNldEN1cnJlbmN5KGN1cnJlbmN5Rm9ybWF0OiBzdHJpbmcpOiBJV29ya1NoZWV0QnVpbGRlcjxUPjtcclxuICAgIGJ1aWxkKCk6IElXb3JrU2hlZXQ7XHJcbn1cclxuXHJcbmNsYXNzIFdvcmtTaGVldEJ1aWxkZXI8VD4gaW1wbGVtZW50cyBJV29ya1NoZWV0QnVpbGRlcjxUPiB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIHhsc3g6IGFueSxcclxuICAgICAgICBwcml2YXRlIG1vbWVudDogYW55LFxyXG4gICAgICAgIHByaXZhdGUgY3VycmVuY3k6IGFueSxcclxuICAgICAgICBwcml2YXRlIGFjY291bnRpbmc6IGFueSxcclxuICAgICAgICBwcml2YXRlIHZhbHVlczogVFtdXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLmNvbHVtbnMgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRUaW1lQ29sdW1uKG5hbWU6IHN0cmluZywgZXhwcmVzc2lvbjogKHg6IFQpID0+IGFueSwgZm9ybWF0Pzogc3RyaW5nKTogSVdvcmtTaGVldEJ1aWxkZXI8VD4ge1xyXG4gICAgICAgIHRoaXMuY29sdW1ucy5wdXNoKHsgbmFtZTogbmFtZSwgZXhwcmVzc2lvbjogZXhwcmVzc2lvbiwgY3JlYXRlQ2VsbDogeCA9PiBuZXcgVGltZUNlbGwoeCwgZm9ybWF0KSB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBhZGREYXRlQ29sdW1uKG5hbWU6IHN0cmluZywgZXhwcmVzc2lvbjogKHg6IFQpID0+IGFueSk6IElXb3JrU2hlZXRCdWlsZGVyPFQ+IHtcclxuICAgICAgICB0aGlzLmNvbHVtbnMucHVzaCh7XHJcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgIGV4cHJlc3Npb246IGV4cHJlc3Npb24sXHJcbiAgICAgICAgICAgIGNyZWF0ZUNlbGw6IHggPT4gbmV3IERhdGVDZWxsKHgpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkTnVtYmVyQ29sdW1uKG5hbWU6IHN0cmluZywgZXhwcmVzc2lvbjogKHg6IFQpID0+IGFueSk6IElXb3JrU2hlZXRCdWlsZGVyPFQ+IHtcclxuICAgICAgICB0aGlzLmNvbHVtbnMucHVzaCh7IG5hbWU6IG5hbWUsIGV4cHJlc3Npb246IGV4cHJlc3Npb24sIGNyZWF0ZUNlbGw6IHggPT4gbmV3IE51bWJlckNlbGwoeCkgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRDdXJyZW5jeUZvcm1hdChjdXJyZW5jeTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBjdXJyZW5jeVN5bWJvbCA9IHRoaXMuY3VycmVuY3kuc3ltYm9saXplKGN1cnJlbmN5KTtcclxuICAgICAgICBjb25zdCBjdXJyZW5jeVNldHRpbmdzID0gdGhpcy5hY2NvdW50aW5nLnNldHRpbmdzLmN1cnJlbmN5O1xyXG4gICAgICAgIHZhciBjdXJyZW5jeUZvcm1hdCA9IGAke2N1cnJlbmN5U3ltYm9sfSMke2N1cnJlbmN5U2V0dGluZ3MudGhvdXNhbmR9IyMwJHtjdXJyZW5jeVNldHRpbmdzLmRlY2ltYWx9MDBgO1xyXG4gICAgICAgIHJldHVybiBjdXJyZW5jeUZvcm1hdDtcclxuICAgIH1cclxuXHJcbiAgICBhZGRDdXJyZW5jeUNvbHVtbihuYW1lOiBzdHJpbmcsIGV4cHJlc3Npb246ICh4OiBUKSA9PiBhbnksIGdldEN1cnJlbmN5PzogKHg6IFQpID0+IHN0cmluZyk6IElXb3JrU2hlZXRCdWlsZGVyPFQ+IHtcclxuICAgICAgICB0aGlzLmNvbHVtbnMucHVzaCh7XHJcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsIGV4cHJlc3Npb246IGV4cHJlc3Npb24sIGNyZWF0ZUNlbGw6ICh2YWx1ZSwgeCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvcm1hdCA9IGdldEN1cnJlbmN5ID8gdGhpcy5nZXRDdXJyZW5jeUZvcm1hdChnZXRDdXJyZW5jeSh4KSkgOiB0aGlzLmN1cnJlbmN5Rm9ybWF0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDdXJyZW5jeUNlbGwodmFsdWUsIGZvcm1hdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBhZGRDb2x1bW4obmFtZTogc3RyaW5nLCBleHByZXNzaW9uOiAoeDogVCkgPT4gYW55LCBjcmVhdGVDZWxsPzogKHg6IGFueSkgPT4gSUNlbGwpOiBJV29ya1NoZWV0QnVpbGRlcjxUPiB7XHJcbiAgICAgICAgdGhpcy5jb2x1bW5zLnB1c2goeyBuYW1lOiBuYW1lLCBleHByZXNzaW9uOiBleHByZXNzaW9uLCBjcmVhdGVDZWxsOiBjcmVhdGVDZWxsIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEN1cnJlbmN5KGN1cnJlbmN5OiBzdHJpbmcpOiBJV29ya1NoZWV0QnVpbGRlcjxUPiB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW5jeUZvcm1hdCA9IHRoaXMuZ2V0Q3VycmVuY3lGb3JtYXQoY3VycmVuY3kpXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0TmFtZShuYW1lOiBzdHJpbmcpOiBJV29ya1NoZWV0QnVpbGRlcjxUPiB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBidWlsZCgpOiBJV29ya1NoZWV0IHtcclxuICAgICAgICB2YXIgd29ya3NoZWV0ID0gbmV3IFdvcmtTaGVldCh0aGlzLm5hbWUsIHRoaXMueGxzeCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGNvbElkeCA9IDA7IGNvbElkeCA8IHRoaXMuY29sdW1ucy5sZW5ndGg7IGNvbElkeCsrKSB7XHJcbiAgICAgICAgICAgIGxldCBjb2x1bW4gPSB0aGlzLmNvbHVtbnNbY29sSWR4XTtcclxuICAgICAgICAgICAgd29ya3NoZWV0LnNldENlbGwoMCwgY29sSWR4LCBjb2x1bW4ubmFtZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnZhbHVlcy5mb3JFYWNoKCh4LCByb3dJZHgpID0+IHtcclxuICAgICAgICAgICAgZm9yIChsZXQgY29sSWR4ID0gMDsgY29sSWR4IDwgdGhpcy5jb2x1bW5zLmxlbmd0aDsgY29sSWR4KyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb2x1bW4gPSB0aGlzLmNvbHVtbnNbY29sSWR4XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY29sdW1uLmV4cHJlc3Npb24oeCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gY29sdW1uLmNyZWF0ZUNlbGwgPyBjb2x1bW4uY3JlYXRlQ2VsbCh2YWx1ZSwgeCkgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgd29ya3NoZWV0LnNldENlbGwocm93SWR4ICsgMSwgY29sSWR4LCB2YWx1ZSwgY2VsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHdvcmtzaGVldDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG5hbWU6IHN0cmluZztcclxuICAgIHByaXZhdGUgY3VycmVuY3lGb3JtYXQ6IHN0cmluZztcclxuICAgIHByaXZhdGUgY29sdW1uczogeyBuYW1lOiBzdHJpbmcsIGV4cHJlc3Npb246ICh4OiBUKSA9PiBhbnksIGNyZWF0ZUNlbGw/OiAodmFsdWU6IGFueSwgeDogVCkgPT4gSUNlbGwgfVtdO1xyXG59IiwiaW50ZXJmYWNlIElFeGNlbENvbnZlcnRlciB7XHJcbiAgICBjcmVhdGUoKTogSVdvcmtCb29rO1xyXG4gICAgY3JlYXRlQnVpbGRlcjxUPih2YWx1ZXM6IFRbXSk6IFdvcmtTaGVldEJ1aWxkZXI8VD47XHJcbiAgICBzYXZlQXMobmFtZTogc3RyaW5nLCB3b3JrYm9vazogSVdvcmtCb29rKTtcclxufVxyXG5cclxuY2xhc3MgRXhjZWxDb252ZXJ0ZXIgaW1wbGVtZW50cyBJRXhjZWxDb252ZXJ0ZXIge1xyXG5cclxuICAgIHN0YXRpYyAkaW5qZWN0ID0gWydzYXZlQXMnLCAnWExTWCcsICdtb21lbnQnLCAnY3VycmVuY3knLCAnYWNjb3VudGluZyddO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX3NhdmVBczogYW55LCBwcml2YXRlIHhsc3g6IGFueSwgcHJpdmF0ZSBtb21lbnQ6IGFueSwgcHJpdmF0ZSBjdXJyZW5jeTogYW55LCBwcml2YXRlIGFjY291bnRpbmc6IGFueSkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGUoKTogSVdvcmtCb29rIHtcclxuICAgICAgICB2YXIgd2IgPSBuZXcgV29ya0Jvb2sodGhpcy54bHN4KTtcclxuICAgICAgICByZXR1cm4gd2I7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlQnVpbGRlcjxUPih2YWx1ZXM6IFRbXSk6IFdvcmtTaGVldEJ1aWxkZXI8VD4ge1xyXG4gICAgICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgV29ya1NoZWV0QnVpbGRlcih0aGlzLnhsc3gsIHRoaXMubW9tZW50LCB0aGlzLmN1cnJlbmN5LCB0aGlzLmFjY291bnRpbmcsIHZhbHVlcyk7XHJcbiAgICAgICAgcmV0dXJuIGJ1aWxkZXI7XHJcbiAgICB9XHJcblxyXG4gICAgc2F2ZUFzKG5hbWU6IHN0cmluZywgd29ya2Jvb2s6IElXb3JrQm9vaykge1xyXG4gICAgICAgIHZhciB3Ym91dCA9IHRoaXMueGxzeC53cml0ZSh3b3JrYm9vaywgeyBib29rVHlwZTogJ3hsc3gnLCBib29rU1NUOiB0cnVlLCB0eXBlOiAnYmluYXJ5JyB9KTtcclxuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5jb252ZXJ0VG9CaW5hcnkod2JvdXQpO1xyXG4gICAgICAgIHRoaXMuX3NhdmVBcyhuZXcgQmxvYihbYnVmZmVyXSwgeyB0eXBlOiBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiIH0pLCBgJHtuYW1lfS54bHN4YCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb252ZXJ0VG9CaW5hcnkod29ya2Jvb2spIHtcclxuICAgICAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHdvcmtib29rLmxlbmd0aCk7XHJcbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpICE9PSB3b3JrYm9vay5sZW5ndGg7ICsraSlcclxuICAgICAgICAgICAgdmlld1tpXSA9IHdvcmtib29rLmNoYXJDb2RlQXQoaSkgJiAweEZGO1xyXG4gICAgICAgIHJldHVybiBidWZmZXI7XHJcbiAgICB9XHJcbn1cclxuXHJcbkFuZ3VsYXIubW9kdWxlKFwiYW5ndWxhci1leGNlbFwiKS5zZXJ2aWNlKCdleGNlbENvbnZlcnRlcicsIEV4Y2VsQ29udmVydGVyKTsiXX0=